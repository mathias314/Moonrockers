#!/usr/bin/env bash

# =============================================================================
# SOURCE THIS INSTEAD OF devel/setup.*
# =============================================================================

# This disgusting hack is present since using 'catkin build' instead of catkin_make
#  breaks roscd, rosrun, etc. There are two things going on here:
#
# 1. The export ROS_PACKAGE_PATH
#    This is because the setup.sh generated with 'catkin build' doesn't seem to
#     add the necessary directory (the catkin workspace root) for a) package
#     name tab completion or b) rosrun'ing python scripts that are located in
#     src/pkg_name/scripts
# 2. The symlink to devel/lib
#    This is here because 'catkin build' causes rosrun to look for executables
#     in a different location, but they're still being generated in the original
#     location in devel/lib, so we delete the new lib directory and symlink it
#     to the old one and rosrun can't tell the difference. This does cause
#     rospack to spit out a couple errors from the Boost C++ library about there
#     being too many levels of symbolic links, but it doesn't seem to cause
#     any issues in execution.
#
# Tab completion for executables is broken and not yet fixed.

# get the directory this script is located in, thanks to
#  https://stackoverflow.com/a/246128/2895810
SCRIPT_DIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
pushd $SCRIPT_DIR

# source the setup script generated by catkin
source devel/setup.sh

# fix for python scripts and package name tab completion
export ROS_PACKAGE_PATH=$ROS_PACKAGE_PATH:`pwd`

# fix for cpp executables
pushd ./devel/.private/catkin_tools_prebuild
rm -r ./lib
ln -s  ../../lib ./lib
popd

popd
